(defvar fia/overlays)

(defun fia/cleanup ()
  (interactive)
  (if (boundp 'fia/overlays)
      (mapc 'delete-overlay fia/overlays)
    (make-local-variable 'fia/overlays))
  (setq fia/overlays nil))

(defun fia/make-overlay (beg end index)
  (let ((o (make-overlay beg end nil nil t)))
    (overlay-put o 'before-string (format "%2d:" index))
    (overlay-put o 'face '(background-color . "red"))
    (setq fia/overlays (cons o fia/overlays))))

(defun fia/get-open-paren (s)
  (save-excursion
    (if (search-backward s nil t)
        (progn
          (search-forward "(")
          (point))
      (point-min))))

(defun fia/skip-blanks ()
  (skip-syntax-forward "-")
  (when (eolp)
    (forward-char 7))
  (skip-syntax-forward "-"))

(defun fia/skip-comma ()
  (when (looking-at ",")
    (forward-char)))

(defun fia/display ()
  (interactive)
  (fia/cleanup)
  (let ((index 1)
        (beg (max (fia/get-open-paren "call")
                  (fia/get-open-paren "subroutine")))
        end)
    (when (= beg (point-min))
      (error "Could not find beginning of subroutine"))
    (goto-char (1- beg))
    (forward-sexp)
    (setq end (point))
    (goto-char beg)
    (while (< (point) end)
      (fia/skip-blanks)
      (setq beg (point))
      (while (and (< (point) end)
                  (not (looking-at "\s*,")))
        (condition-case nil
            (forward-sexp)
          (error (setq end (point)))))
      (fia/make-overlay beg (point) index)
      (setq index (1+ index))
      (fia/skip-blanks)
      (fia/skip-comma))))
